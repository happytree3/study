/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2024-06-20 03:45:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.biz.search.proten;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.lang.*;
import java.net.*;
import java.util.*;
import com.google.gson.*;
import org.apache.log4j.Logger;

public final class searchTrans_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


 public String getAutoComplate(String receiverURL, String params, int timeout, String pretty) {
    Logger logger = Logger.getLogger("[Log]");
    StringBuffer receiveMsg = new StringBuffer();
    HttpURLConnection uc = null;
    try {
       URL servletUrl = new URL(receiverURL);
       uc = (HttpURLConnection) servletUrl.openConnection();
       uc.setRequestProperty("Content-type", "application/x-www-form-urlencoded");
       uc.setRequestMethod("POST");
       uc.setDoOutput(true);
       uc.setDoInput(true);
       uc.setUseCaches(false);
       uc.setDefaultUseCaches(false);
       uc.setConnectTimeout(timeout);
       uc.setReadTimeout(timeout);
       DataOutputStream dos = new DataOutputStream (uc.getOutputStream());
       dos.write(params.getBytes());
       dos.flush();
       dos.close();

       int errorCode = 0;

    //   logger.info("[URLConnection Response Code] " + uc.getResponseCode() + " ::" + HttpURLConnection.HTTP_OK);
       
       if (uc.getResponseCode() == HttpURLConnection.HTTP_OK) {
          String currLine = "";
              // UTF-8. ..
              BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream(), "UTF-8"));
              while ((currLine = in.readLine()) != null) {
                 receiveMsg.append(currLine);//.append("\r\n");
              }
              in.close();
          } else {
                errorCode = uc.getResponseCode();
                return receiveMsg.toString();
           }
     } catch(Exception ex) {
        logger.error(ex);
     } finally {
          uc.disconnect();
     }

     Gson gson = new GsonBuilder().disableHtmlEscaping().create();
     if(pretty.equals("y") || pretty.equals("Y")){
        gson = new GsonBuilder().disableHtmlEscaping().setPrettyPrinting().create();
     }
     
     JsonObject convertedObject = new Gson().fromJson(receiveMsg.toString(), JsonObject.class);
     return gson.toJson(convertedObject);
 }

public static String getCheckReq(javax.servlet.http.HttpServletRequest req, String parameter, String default_value) {
    String req_value = req.getParameter(parameter)!=null && !"".equals(req.getParameter(parameter)) ? req.getParameter(parameter):default_value;
    return req_value;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.lang");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.net");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.google.gson");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.apache.log4j.Logger");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/json; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
request.setCharacterEncoding("utf-8");

/*
 * 자동완성
 */
 response.setHeader("Access-Control-Allow-Origin", "*"); 
 int timeout = 500;    //ms
 // 서버에 맞춰서 변경 필요
 String ES_SERVERS  ="49.247.213.92:6201";

 String search    = getCheckReq(request, "query", "");               //검색어
 String service    = getCheckReq(request, "service", "");            //auto_keyword_service
 String pretty    = getCheckReq(request, "pretty", "y");                   //json 구조를 보기편하게 확인하기위한 view
 search = URLEncoder.encode(search, "UTF-8");
 String url = "http://" + ES_SERVERS + "/_pro10-autocomplete";
String params = "?query=" + search + "&service=" + service;
 
 out.println(getAutoComplate(url + params, "", timeout, pretty)); //send url value

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
